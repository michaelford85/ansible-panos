---
- name: Provision AWS PANOS Firewalls
  hosts: localhost
  gather_facts: no
  vars_files:
    - ./vars/default_vars.yml
    - ./credentials/tower_creds.yml

  collections:
   - paloaltonetworks.panos

  tasks:


   # VPC or Virtual Private Cloud.  The instance will be tied to a subnet that belongs to this particular VPC
    - name: "Create AWS VPC {{ ec2_prefix }}-vpc"
      amazon.aws.ec2_vpc_net:
        region: "{{ ec2_region }}"
        name: "{{ ec2_prefix }}-vpc"
        cidr_block: "{{ ec2_vpc_cidr }}"
        tags:
          demo: panos
          Name: "{{ ec2_prefix }}-vpc"
      register: create_vpc

    # If a secruity group is not created, instances will be tied to the Default secruity grouop that allows all traffic (non-secure)
    - name: "Create EC2 Security Group {{ec2_prefix }}-sg"
      amazon.aws.ec2_group:
        region: "{{ ec2_region }}"
        name: "{{ ec2_prefix }}-sg"
        description: "Application VPC for {{ ec2_prefix }}"
        vpc_id: "{{create_vpc.vpc.id}}"
        tags:
          Name: "{{ ec2_prefix }}-sg"
          demo: panos
        rules:
          - proto: tcp
            ports:
            - 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
            - 443
            cidr_ip: 0.0.0.0/0

    # This task is subdiving up the 192.168.0.0/24 and getting a smaller chunk, a /28
    - name: "Create Subnet for {{ ec2_prefix }}-vpc"
      amazon.aws.ec2_vpc_subnet:
        region: "{{ ec2_region }}"
        vpc_id: "{{ create_vpc.vpc.id }}"
        map_public: yes
        cidr: "{{ ec2_vpc_subnet }}"
        tags:
          Name: "{{ ec2_prefix }}-subnet"
          demo: panos
      register: create_subnet

    - name: Set ec2_subnet_id fact
      set_fact:
        ec2_vpc_subnet_id: "{{ create_subnet.subnet.id }}"

    # Create Internet Gateway and attach it to VPC.  This allows instances on this VPC to reach the Internet
    - name: "Create VPC Internet Gateway for {{ ec2_prefix }}-vpc"
      community.aws.ec2_vpc_igw:
        region: "{{ ec2_region }}"
        vpc_id: "{{ create_vpc.vpc.id }}"
        tags:
          Name: "{{ ec2_prefix }}-igw"
          demo: panos
      register: igw

    - name: Retrieve the Main Route Table
      ec2_vpc_route_table_info:
        region: "{{ ec2_region }}"
        filters:
          vpc-id: "{{ create_vpc.vpc.id }}"
      register: vpc_route_tables

    # This task adds a route to the internet from the subnet through the IGW
    - name: Create a Default Route for the Subnet in the Main Route Table
      community.aws.ec2_vpc_route_table:
        region: "{{ ec2_region }}"
        vpc_id: "{{ create_vpc.vpc.id }}"
        route_table_id: "{{ vpc_route_tables[0].id }}"
        # subnets:
        #   - "{{ create_subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          demo: panos
          Name: "{{ ec2_prefix }}-route-table"

    # - name: Create AWS SSH Key Pair
    #   amazon.aws.ec2_key:
    #     region: "{{ ec2_region }}"
    #     name: "{{ ec2_prefix }}-key"
    #   register: create_key
    #
    # # This is just saving off the private key, this can only be done 1 time on the first creation of the key, pair
    # - name: Save Private Key Locally
    #   copy:
    #     content: "{{ create_key.key.private_key }}"
    #     dest: "{{ working_dir }}/{{ ec2_prefix }}-key-private.pem"
    #     mode: '0600'
    #   when: create_key.changed
    #
    # - name: Update Ansible Tower PANOS Machine Credential
    #   tower_credential:
    #     name: AWS PANOS Instances Key
    #     organization: "Security Organization"
    #     tower_host: "{{ tower_url }}"
    #     tower_username: "{{ tower_user }}"
    #     tower_password: "{{ tower_pass }}"
    #     kind: ssh
    #     username: admin
    #     ssh_key_data: "{{ create_key.key.private_key }}"
    #     tower_verify_ssl: false
    #   delegate_to: localhost
    #   run_once: true
    #   when:
    #     - create_key.changed
    #   #   - tower_provision
    #
    # # - name: Gather Subnet Information
    # #   ec2_vpc_subnet_info:
    # #     region: "{{ ec2_region }}"
    # #     filters:
    # #       "tag:application": "{{ application }}"
    # #       "tag:provisioner": "mford"
    # #   register: subnet_info
    #
    # # - debug:
    # #     var: subnet_info
    #
    # - name: "Create EC2 instances for panos"
    #   amazon.aws.ec2:
    #     assign_public_ip: true
    #     key_name: "{{ ec2_prefix }}-key"
    #     group: "{{ ec2_prefix }}-sg"
    #     instance_type: "{{ machine_type }}"
    #     image: "{{ panos_image_id }}"
    #     region: "{{ ec2_region }}"
    #     count: "{{ num_instances }}"
    #     wait: "{{ ec2_wait }}"
    #     vpc_subnet_id: "{{ create_subnet.subnet.id }}"
    #     instance_tags:
    #       Name: panos-demo
    #       demo: panos
    #     volumes:
    #       - device_name: /dev/xvda
    #         volume_type: gp2
    #         volume_size: 60
    #         delete_on_termination: true
    #   register: ec2_instances
    #
    # - name: Wait for SSH to come up
    #   # delegate_to: "{{ item.public_dns_name }}"
    #   wait_for:
    #     host: "{{ item.public_dns_name }}"
    #     delay: 60
    #     sleep: 10
    #     timeout: 600
    #     port: 22
    #   loop: "{{ ec2_instances.instances }}"
